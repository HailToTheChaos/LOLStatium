
# Generated by CodiumAI
from unittest.mock import MagicMock
import os
import sys

sys.path.insert(0, 'scripts')

from scripts.Web_scrap import Scraping
from scripts.Web_scrap import splits
from scripts.PicksBans import getDF_picksBans
from scripts.Metadata import *
from scripts.MatchHistory import *
from scripts.Positions import *
import pandas as pd
import json

import unittest

class TestGetdfPicksbans(unittest.TestCase):
    # Tests that the function works properly with valid input values for league and season parameters.
    def test_valid_input_values(self):
        """
        Esta función comprueba si el marco de datos obtenido de una fuente y un año específicos no está
        vacío.
        """
        df = getDF_picksBans("LEC", "2023")
        self.assertFalse(df.empty)

    # Tests that the function generates properly the csv file if download parameter is True.
    def test_csv_file(self):
        # Calling the function with download parameter set to True
        getDF_picksBans("LEC", "2023", True)
        # Asserting that the csv file was generated
        self.assertTrue(os.path.exists("Model\\Download\\Picks&Bans-LEC_2023.csv"))

    # Tests that the function handles properly the case of empty data returned from the website.
    def test_empty_data(self):
        """
        La función prueba si el marco de datos de salida está vacío cuando los datos de entrada están
        vacíos.
        """
        Scraping.games = MagicMock(return_value=([], [], [], [], []))
        df = getDF_picksBans("", "")
        self.assertTrue(df.empty)

    def test_invalid_input_values(self):
        """
        Esta función comprueba si hay valores de entrada no válidos en la función getDF_picksBans y
        afirma que el marco de datos resultante está vacío.
        """
        Scraping.games = MagicMock(return_value=([], [], [], [], []))
        df = getDF_picksBans("InvalidLeague", "InvalidSeason")
        self.assertTrue(df.empty)


    # Tests that the function handles properly the case of large amount of data causing memory issues.

class TestGetdfMetadata(unittest.TestCase):
    # Tests that the function retrieves metadata for a valid league and season, and returns a properly formatted DataFrame.
    def test_getDF_metaData_valid_input(self):
        # Arrange
        league = "LCS"
        season = "2021"
        expected_columns = ['championName', 'key', 'Split', 'games', 'win', 'loss', 'kills', 'deaths', 'assists', 'KDA', 'championPlayed', 'ban', 'Avg BT', 'Presence']
        
        # Act
        result = getDF_metaData(league, season)
        
        # Assert
        self.assertIsInstance(result, pd.DataFrame)
        self.assertEqual(list(result.columns), expected_columns)

    # Tests that the function downloads the resulting DataFrame as a CSV file when the 'download' parameter is set to True, and saves it to the correct directory.
    def test_getDF_metaData_download(self):
        # Arrange
        league = "LEC"
        season = "2021"
        expected_path = f'Model\\Download\\Meta-{league.upper()}_{season}.csv'
        
        # Act
        getDF_metaData(league, season, download=True)
        
        # Assert
        self.assertTrue(os.path.exists(expected_path))

    # Tests that the function handles errors when retrieving metadata for an invalid league or season, and returns an empty DataFrame.
    def test_getDF_metaData_invalid_input(self):
        # Arrange
        league = "InvalidLeague"
        season = "2021"
        
        # Act
        result = getDF_metaData(league, season)
        
        # Assert
        self.assertIsInstance(result, pd.DataFrame)
        self.assertTrue(result.empty)


    # Tests that the downloaded CSV file has the correct formatting and data types, and can be read back into a DataFrame without errors.
    def test_getDF_metaData_csv_format(self):
        # Arrange
        league = "LCS"
        sson = "2021"
        expected_columns = ['championName', 'key', 'Split', 'games', 'win', 'loss', 'kills', 'deaths', 'assists', 'KDA', 'championPlayed', 'ban', 'Avg BT', 'Presence']
        expected_path = f'Model\\Download\\Meta-{league.upper()}_{sson}.csv'
        
        # Act
        getDF_metaData(league, sson, download=True)
        result = pd.read_csv(expected_path)
        
        # Assert
        self.assertIsInstance(result, pd.DataFrame)
        self.assertEqual(list(result.columns), expected_columns)

class TestGetdfMh(unittest.TestCase):
    # Tests that the function successfully saves the DataFrame as a CSV file if the download parameter is set to True.
    def test_getDF_MH_save_csv(self): 
        league = "LEC"
        season = "2021"
        expected_path = f'Model\\Download\\MatchHistory-{league.upper()}_{season}.csv'
        
        # Act
        getDF_MH(league, season, download=True)
        
        # Assert
        self.assertTrue(os.path.exists(expected_path))

    # Tests that the function handles the case where the extracted match history data is empty.
    def test_getDF_MH_empty(self):
        # Mocking the Scraping.games function to return empty data
        with unittest.mock.patch('Web_scrap.Scraping.games') as mock_games:
            mock_games.return_value = []
            result = getDF_MH('', '')
            self.assertIsInstance(result, pd.DataFrame)
            self.assertEqual(len(result), 0)

    # Tests that the function handles the case where the extracted match history data contains missing or invalid values.
    def test_getDF_MH_invalid(self):            
        result = getDF_MH('InvalidLeague', '10000')
        self.assertIsInstance(result, pd.DataFrame)
        self.assertEqual(len(result), 0)

class TestGetdfPositions(unittest.TestCase):
    # Tests that the function works correctly with valid input for league and season.
    def test_getDF_positions_validInput(self):
        result = getDF_positions('LEC', '2021')
        self.assertIsInstance(result, pd.DataFrame)
        self.assertFalse(result.empty)

    # Tests that the function returns an empty DataFrame when an empty season input is provided.
    def test_getDF_positions_emptySeason(self):
        result = getDF_positions('LCS', '')
        self.assertIsInstance(result, pd.DataFrame)
        self.assertTrue(result.empty)

    # Tests that the function returns an empty DataFrame when an invalid league input is provided.
    def test_getDF_positions_invalidLeague(self):
        result = getDF_positions('InvalidLeague', '2021')
        self.assertIsInstance(result, pd.DataFrame)
        self.assertTrue(result.empty)



if __name__ == '__main__':
    unittest.main()